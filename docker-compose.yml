services:
  # Serwis Bazy Danych
  db:
    image: postgres:15-alpine
    container_name: booking_system_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=database
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d database"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serwis Backendu
  backend:
    container_name: booking_system_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - /app/.venv
    ports:
      - "8000:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - DATABASE_URL=postgresql+psycopg2://admin:admin@db:5432/database
      - SECRET_KEY=twoj_bardzo_bezpieczny_sekretny_klucz_zmien_to_koniecznie
    depends_on:
      db:
        condition: service_healthy

  # Serwis Frontendu (serwer deweloperski React)
  frontend:
    container_name: booking_system_frontend_dev
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development # Mówimy Dockerowi, aby budował tylko do etapu 'development'
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    # Nie wystawiamy portu 3000 na zewnątrz, Nginx będzie się z nim komunikował
    depends_on:
      - backend

  # Serwis Nginx (brama wejściowa)
  nginx:
    container_name: booking_system_nginx
    build:
      context: ./frontend # Używamy tego samego kontekstu i Dockerfile
      dockerfile: Dockerfile
      target: production # Ale budujemy obraz produkcyjny Nginx
    ports:
      - "80:80" # Jedyny port wystawiony na zewnątrz
    depends_on:
      - frontend # Nginx zależy od serwera deweloperskiego
      - backend

volumes:
  postgres_data:
