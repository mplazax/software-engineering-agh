{"openapi":"3.1.0","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/auth/token":{"post":{"tags":["authentication"],"summary":"Login For Access Token","description":"OAuth2 compatible token login, get an access token for future requests.\n\nArgs:\n    form_data (OAuth2PasswordRequestForm): Form data with username and password\n    db (Session): Database session\n\nRaises:\n    HTTPException: If authentication fails\n\nReturns:\n    dict: Access token and token type","operationId":"login_for_access_token_auth_token_post","requestBody":{"content":{"application/x-www-form-urlencoded":{"schema":{"$ref":"#/components/schemas/Body_login_for_access_token_auth_token_post"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Token"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/register":{"post":{"tags":["authentication"],"summary":"Register User","description":"Register a new user.\n\nArgs:\n    user (UserCreate): User registration data\n    db (Session): Database session\n\nRaises:\n    HTTPException: If email already exists or group is invalid\n\nReturns:\n    dict: Success message","operationId":"register_user_auth_register_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"additionalProperties":true,"type":"object","title":"Response Register User Auth Register Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/auth/me":{"get":{"tags":["authentication"],"summary":"Read Users Me","description":"Get current user information.\n\nArgs:\n    current_user (User): The currently authenticated user\n\nReturns:\n    User: The user object of the authenticated user","operationId":"read_users_me_auth_me_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/groups/":{"get":{"tags":["groups"],"summary":"Get Groups","description":"Retrieve a paginated list of all groups.\n\nArgs:\n    skip (int, optional): Number of records to skip. Defaults to 0.\n    limit (int, optional): Maximum number of records to return. Defaults to 10.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nReturns:\n    list[Group]: List of group objects.","operationId":"get_groups_groups__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"skip","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Skip"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/GroupResponse"},"title":"Response Get Groups Groups  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["groups"],"summary":"Create Group","description":"Create a new group.\n\nArgs:\n    group (GroupCreate): Group data for creation.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If user is not found, year is invalid, or leader is not a STAROSTA.\n\nReturns:\n    Group: The newly created group object.","operationId":"create_group_groups__post","security":[{"OAuth2PasswordBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/groups/{group_id}":{"get":{"tags":["groups"],"summary":"Get Group","description":"Retrieve a single group by ID.\n\nArgs:\n    group_id (int): ID of the group to retrieve.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If group with the specified ID is not found.\n\nReturns:\n    Group: The requested group object.","operationId":"get_group_groups__group_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"group_id","in":"path","required":true,"schema":{"type":"integer","title":"Group Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["groups"],"summary":"Update Group","description":"Update an existing group.\n\nArgs:\n    group_id (int): ID of the group to update.\n    group (GroupUpdate): Updated group data.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If group or user is not found, year is invalid, or leader is not a STAROSTA.\n\nReturns:\n    Group: The updated group object.","operationId":"update_group_groups__group_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"group_id","in":"path","required":true,"schema":{"type":"integer","title":"Group Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/GroupResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["groups"],"summary":"Delete Group","description":"Delete a group by ID.\n\nArgs:\n    group_id (int): ID of the group to delete.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If group with the specified ID is not found.","operationId":"delete_group_groups__group_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"group_id","in":"path","required":true,"schema":{"type":"integer","title":"Group Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/users/":{"get":{"tags":["users"],"summary":"Get Users","description":"Retrieve a paginated list of all users.\n\nArgs:\n    skip (int, optional): Number of records to skip. Defaults to 0.\n    limit (int, optional): Maximum number of records to return. Defaults to 10.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nReturns:\n    list[User]: List of user objects.","operationId":"get_users_users__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"skip","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Skip"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/UserResponse"},"title":"Response Get Users Users  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/users/{user_id}":{"get":{"tags":["users"],"summary":"Get User","description":"Retrieve a single user by ID.\n\nArgs:\n    user_id (int): ID of the user to retrieve.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If user with the specified ID is not found.\n\nReturns:\n    User: The requested user object.","operationId":"get_user_users__user_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","title":"User Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["users"],"summary":"Update User","description":"Update an existing user.\n\nArgs:\n    user_id (int): ID of the user to update.\n    user (UserCreate): Updated user data.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If user is not found or email is already registered by another user.\n\nReturns:\n    User: The updated user object.","operationId":"update_user_users__user_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","title":"User Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["users"],"summary":"Delete User","description":"Delete a user by ID.\n\nArgs:\n    user_id (int): ID of the user to delete.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If user with the specified ID is not found.","operationId":"delete_user_users__user_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","title":"User Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/users/create":{"post":{"tags":["users"],"summary":"Create User","description":"Create a new user.\n\nArgs:\n    user (UserCreate): User data for creation.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If email is already registered.\n\nReturns:\n    User: The newly created user object.","operationId":"create_user_users_create_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/rooms/":{"get":{"tags":["rooms"],"summary":"Get Rooms","description":"Retrieve a paginated list of all rooms.\n\nArgs:\n    skip (int, optional): Number of records to skip. Defaults to 0.\n    limit (int, optional): Maximum number of records to return. Defaults to 10.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nReturns:\n    list[Room]: List of room objects.","operationId":"get_rooms_rooms__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"skip","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Skip"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/RoomResponse"},"title":"Response Get Rooms Rooms  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["rooms"],"summary":"Create Room","description":"Create a new room.\n\nArgs:\n    room (RoomCreate): Room data for creation.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If capacity is not positive, room name already exists, or room type is invalid.\n\nReturns:\n    Room: The newly created room object.","operationId":"create_room_rooms__post","security":[{"OAuth2PasswordBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/rooms/check-availability":{"get":{"tags":["rooms"],"summary":"Get Available Rooms","description":"Find all available rooms matching the criteria within a specified time interval.\n\nArgs:\n    seats (int): Minimum number of seats required in the room.\n    room_type (RoomType): Type of room required.\n    start (date): Start date of the desired interval.\n    end (date): End date of the desired interval.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If end time is not greater than start time or if seats is not positive.\n\nReturns:\n    list[Room]: List of available rooms matching the criteria.","operationId":"get_available_rooms_rooms_check_availability_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"seats","in":"query","required":true,"schema":{"type":"integer","title":"Seats"}},{"name":"room_type","in":"query","required":true,"schema":{"$ref":"#/components/schemas/RoomType"}},{"name":"start","in":"query","required":true,"schema":{"type":"string","format":"date","description":"Start of desired interval","title":"Start"},"description":"Start of desired interval"},{"name":"end","in":"query","required":true,"schema":{"type":"string","format":"date","description":"End of desired interval","title":"End"},"description":"End of desired interval"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/RoomResponse"},"title":"Response Get Available Rooms Rooms Check Availability Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/rooms/check-availability/{room_id}":{"get":{"tags":["rooms"],"summary":"Get Room Availability","description":"Check if a specific room is available during a given time interval.\n\nArgs:\n    room_id (int): ID of the room to check.\n    start (datetime): Start datetime of the interval.\n    end (datetime): End datetime of the interval.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If end time is not greater than start time or if room is not found.\n\nReturns:\n    dict: Dictionary with 'available' key indicating room availability.","operationId":"get_room_availability_rooms_check_availability__room_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"room_id","in":"path","required":true,"schema":{"type":"integer","title":"Room Id"}},{"name":"start","in":"query","required":true,"schema":{"type":"string","format":"date-time","description":"Start of desired interval","title":"Start"},"description":"Start of desired interval"},{"name":"end","in":"query","required":true,"schema":{"type":"string","format":"date-time","description":"End of desired interval","title":"End"},"description":"End of desired interval"}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"object","additionalProperties":true,"title":"Response Get Room Availability Rooms Check Availability  Room Id  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/rooms/{room_id}":{"get":{"tags":["rooms"],"summary":"Get Room","description":"Retrieve a single room by its ID.\n\nArgs:\n    room_id (int): ID of the room to retrieve.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If room with the specified ID is not found.\n\nReturns:\n    Room: The requested room object.","operationId":"get_room_rooms__room_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"room_id","in":"path","required":true,"schema":{"type":"integer","title":"Room Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["rooms"],"summary":"Update Room","description":"Update an existing room.\n\nArgs:\n    room_id (int): ID of the room to update.\n    room (RoomUpdate): Updated room data.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If room is not found, capacity is not positive, room name already exists,\n                  or room type is invalid.\n\nReturns:\n    Room: The updated room object.","operationId":"update_room_rooms__room_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"room_id","in":"path","required":true,"schema":{"type":"integer","title":"Room Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["rooms"],"summary":"Delete Room","description":"Delete a room by ID.\n\nArgs:\n    room_id (int): ID of the room to delete.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If room with the specified ID is not found.","operationId":"delete_room_rooms__room_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"room_id","in":"path","required":true,"schema":{"type":"integer","title":"Room Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/proposals/":{"get":{"tags":["proposals"],"summary":"Get Proposals","description":"Retrieve a paginated list of all availability proposals.\n\nArgs:\n    skip (int, optional): Number of records to skip. Defaults to 0.\n    limit (int, optional): Maximum number of records to return. Defaults to 10.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nReturns:\n    list[AvailabilityProposal]: List of availability proposals.","operationId":"get_proposals_proposals__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"skip","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Skip"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ProposalResponse"},"title":"Response Get Proposals Proposals  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["proposals"],"summary":"Create Proposal","description":"Create a new availability proposal.\n\nArgs:\n    proposal (ProposalCreate): Data for the new proposal.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If change request or user is not found, or if a proposal already exists\n                  for the same user and time slot.\n\nReturns:\n    AvailabilityProposal: The newly created proposal.","operationId":"create_proposal_proposals__post","security":[{"OAuth2PasswordBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/proposals/{proposal_id}":{"get":{"tags":["proposals"],"summary":"Get Proposal","description":"Retrieve a specific availability proposal by ID.\n\nArgs:\n    proposal_id (int): ID of the proposal to retrieve.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If proposal with the specified ID is not found.\n\nReturns:\n    AvailabilityProposal: The requested proposal.","operationId":"get_proposal_proposals__proposal_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"proposal_id","in":"path","required":true,"schema":{"type":"integer","title":"Proposal Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["proposals"],"summary":"Update Proposal","description":"Update an existing availability proposal.\n\nArgs:\n    proposal_id (int): ID of the proposal to update.\n    proposal (ProposalUpdate): Updated proposal data.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If proposal or user is not found.\n\nReturns:\n    AvailabilityProposal: The updated proposal.","operationId":"update_proposal_proposals__proposal_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"proposal_id","in":"path","required":true,"schema":{"type":"integer","title":"Proposal Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["proposals"],"summary":"Delete Proposal","description":"Delete an availability proposal.\n\nArgs:\n    proposal_id (int): ID of the proposal to delete.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If proposal is not found.","operationId":"delete_proposal_proposals__proposal_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"proposal_id","in":"path","required":true,"schema":{"type":"integer","title":"Proposal Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/proposals/{change_request_id}":{"get":{"tags":["proposals"],"summary":"Get Change Request Proposals","description":"Retrieve all proposals for a specific change request.\n\nArgs:\n    change_request_id (int): ID of the change request.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If no proposals are found for the change request.\n\nReturns:\n    list[AvailabilityProposal]: List of proposals for the specified change request.","operationId":"get_change_request_proposals_proposals__change_request_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"change_request_id","in":"path","required":true,"schema":{"type":"integer","title":"Change Request Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ProposalResponse"},"title":"Response Get Change Request Proposals Proposals  Change Request Id  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/proposals/{proposal_id}/changestatus/leader":{"post":{"tags":["proposals"],"summary":"Change Status By Leader","operationId":"change_status_by_leader_proposals__proposal_id__changestatus_leader_post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"proposal_id","in":"path","required":true,"schema":{"type":"integer","title":"Proposal Id"}},{"name":"new_status","in":"query","required":true,"schema":{"type":"boolean","title":"New Status"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/proposals/{proposal_id}/changestatus/representative":{"post":{"tags":["proposals"],"summary":"Change Status By Representative","operationId":"change_status_by_representative_proposals__proposal_id__changestatus_representative_post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"proposal_id","in":"path","required":true,"schema":{"type":"integer","title":"Proposal Id"}},{"name":"new_status","in":"query","required":true,"schema":{"type":"boolean","title":"New Status"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProposalResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/change_requests/":{"get":{"tags":["change_requests"],"summary":"Get Requests","description":"Retrieve a paginated list of all change requests.\n\nArgs:\n    skip (int, optional): Number of records to skip. Defaults to 0.\n    limit (int, optional): Maximum number of records to return. Defaults to 10.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nReturns:\n    list[ChangeRequest]: List of change requests.","operationId":"get_requests_change_requests__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"skip","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Skip"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ChangeRequestResponse"},"title":"Response Get Requests Change Requests  Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"post":{"tags":["change_requests"],"summary":"Create Request","description":"Create a new change request.\n\nArgs:\n    request (ChangeRequestCreate): Data for the new change request.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If course event or user is not found.\n\nReturns:\n    ChangeRequest: The newly created change request.","operationId":"create_request_change_requests__post","security":[{"OAuth2PasswordBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeRequestCreate"}}}},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeRequestResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/change_requests/related":{"get":{"tags":["change_requests"],"summary":"Get Related Requests","description":"Get all change requests related to the current user, optionally filtered by status,\nwith pagination.\nIncludes requests:\n- created by the user\n- for courses where the user is the teacher\n- for courses where the user is group leader (starosta)","operationId":"get_related_requests_change_requests_related_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"status","in":"query","required":false,"schema":{"anyOf":[{"$ref":"#/components/schemas/ChangeRequestStatus"},{"type":"null"}],"description":"Optional status filter","title":"Status"},"description":"Optional status filter"},{"name":"skip","in":"query","required":false,"schema":{"type":"integer","default":0,"title":"Skip"}},{"name":"limit","in":"query","required":false,"schema":{"type":"integer","default":10,"title":"Limit"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ChangeRequestResponse"},"title":"Response Get Related Requests Change Requests Related Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/change_requests/{event_id}":{"get":{"tags":["change_requests"],"summary":"Get Request By Id","description":"Retrieve a specific change request by ID.\n\nArgs:\n    request_id (int): ID of the change request to retrieve.\n    db (Session): Database session.\n\nRaises:\n    HTTPException: If change request with the specified ID is not found.\n\nReturns:\n    ChangeRequest: The requested change request.","operationId":"get_request_by_id_change_requests__event_id__get","parameters":[{"name":"request_id","in":"query","required":true,"schema":{"type":"integer","title":"Request Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeRequestResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/change_requests/{request_id}":{"put":{"tags":["change_requests"],"summary":"Update Request","description":"Update an existing change request.\n\nArgs:\n    request (ChangeRequestUpdate): Updated change request data.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If change request, course event, or user is not found.\n\nReturns:\n    ChangeRequest: The updated change request.","operationId":"update_request_change_requests__request_id__put","security":[{"OAuth2PasswordBearer":[]}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeRequestUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangeRequestResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["change_requests"],"summary":"Delete Request","description":"Delete a change request by ID.\n\nArgs:\n    request_id (int): ID of the change request to delete.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If change request with the specified ID is not found.","operationId":"delete_request_change_requests__request_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"request_id","in":"path","required":true,"schema":{"type":"integer","title":"Request Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/courses/":{"get":{"tags":["courses"],"summary":"Get Courses","description":"Get all courses.\n\nArgs:\n    db (Session): Database session\n    current_user (User): Current authenticated user\n\nReturns:\n    list[Course]: List of all courses","operationId":"get_courses_courses__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/CourseResponse"},"type":"array","title":"Response Get Courses Courses  Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"post":{"tags":["courses"],"summary":"Create Course","description":"Create a new course.\n\nArgs:\n    course (CourseCreate): Course data for creation\n    db (Session): Database session\n    current_user (User): Current authenticated user (must be ADMIN, KOORDYNATOR or PROWADZACY)\n\nRaises:\n    HTTPException: If teacher or group is not found\n\nReturns:\n    Course: The created course","operationId":"create_course_courses__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/courses/{course_id}":{"get":{"tags":["courses"],"summary":"Get Course","description":"Get a single course by ID.\n\nArgs:\n    course_id (int): ID of the course to retrieve\n    db (Session): Database session\n    current_user (User): Current authenticated user\n\nRaises:\n    HTTPException: If course is not found\n\nReturns:\n    Course: The requested course","operationId":"get_course_courses__course_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"course_id","in":"path","required":true,"schema":{"type":"integer","title":"Course Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["courses"],"summary":"Delete Course","description":"Delete a course by ID.\n\nArgs:\n    course_id (int): ID of the course to delete\n    db (Session): Database session\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR)\n\nRaises:\n    HTTPException: If course is not found","operationId":"delete_course_courses__course_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"course_id","in":"path","required":true,"schema":{"type":"integer","title":"Course Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["courses"],"summary":"Update Course","description":"Update a course by ID.\n\nArgs:\n    course_id (int): ID of the course to update\n    course (CourseCreate): Updated course data\n    db (Session): Database session\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR)\n\nRaises:\n    HTTPException: If course, teacher, or group is not found\n\nReturns:\n    Course: The updated course","operationId":"update_course_courses__course_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"course_id","in":"path","required":true,"schema":{"type":"integer","title":"Course Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseCreate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/courses/events":{"post":{"tags":["courses"],"summary":"Create Event","description":"Create a new course event (schedule a class).\n\nArgs:\n    event (CourseEventCreate): Event data for creation\n    db (Session): Database session\n    current_user (User): Current authenticated user (must be ADMIN, KOORDYNATOR or PROWADZACY)\n\nRaises:\n    HTTPException: If course, room, or time slot is not found, or if time slot is already taken\n\nReturns:\n    CourseEvent: The created course event","operationId":"create_event_courses_events_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseEventCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseEventResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/courses/events/{event_id}":{"put":{"tags":["courses"],"summary":"Update Event","description":"Update a course event by ID.\n\nArgs:\n    event_id (int): ID of the event to update\n    event (CourseEventUpdate): Updated event data\n    db (Session): Database session\n    current_user (User): Current authenticated user (must be ADMIN, KOORDYNATOR or PROWADZACY)\n\nRaises:\n    HTTPException: If event, course, room, or time slot is not found, or if time slot is already taken\n\nReturns:\n    CourseEvent: The updated course event","operationId":"update_event_courses_events__event_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"event_id","in":"path","required":true,"schema":{"type":"integer","title":"Event Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseEventUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseEventResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/courses/{course_id}/events":{"get":{"tags":["courses"],"summary":"Get Events For Course","description":"Get all events for a specific course.\n\nArgs:\n    course_id (int): ID of the course\n    db (Session): Database session\n    current_user (User): Current authenticated user\n\nReturns:\n    list[CourseEvent]: List of events for the specified course","operationId":"get_events_for_course_courses__course_id__events_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"course_id","in":"path","required":true,"schema":{"type":"integer","title":"Course Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CourseEventResponse"},"title":"Response Get Events For Course Courses  Course Id  Events Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/courses/group/{group_id}/events":{"get":{"tags":["courses"],"summary":"Get Events For Group","description":"Get all events for a specific group.\n\nArgs:\n    group_id (int): ID of the group\n    db (Session): Database session\n    current_user (User): Current authenticated user\n\nReturns:\n    list[CourseEvent]: List of events for the specified group","operationId":"get_events_for_group_courses_group__group_id__events_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"group_id","in":"path","required":true,"schema":{"type":"integer","title":"Group Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CourseEventResponse"},"title":"Response Get Events For Group Courses Group  Group Id  Events Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/courses/events/{course_event_id}":{"get":{"tags":["courses"],"summary":"Get Course Event","description":"Get a single course event by ID.\n\nArgs:\n    course_event_id (int): ID of the course event\n    db (Session): Database session\n    current_user (User): Current authenticated user\n\nRaises:\n    HTTPException: If event is not found\n\nReturns:\n    CourseEvent: The requested course event","operationId":"get_course_event_courses_events__course_event_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"course_event_id","in":"path","required":true,"schema":{"type":"integer","title":"Course Event Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseEventResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/change_recommendation/common-availability":{"post":{"tags":["change_recommendation"],"summary":"Find And Add Common Availability","description":"Find common availability between two users and generate room change recommendations.\n\nArgs:\n    user1_id (int): ID of the first user\n    user2_id (int): ID of the second user\n    change_request_id (int): ID of the change request\n    db (Session): Database session\n    current_user (User): Current authenticated user\n    \nRaises:\n    HTTPException: If change request is not found or no common availability/rooms found\n    \nReturns:\n    dict: Success message with the number of recommendations added","operationId":"find_and_add_common_availability_change_recommendation_common_availability_post","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"user1_id","in":"query","required":true,"schema":{"type":"integer","title":"User1 Id"}},{"name":"user2_id","in":"query","required":true,"schema":{"type":"integer","title":"User2 Id"}},{"name":"change_request_id","in":"query","required":true,"schema":{"type":"integer","title":"Change Request Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"object","additionalProperties":true,"title":"Response Find And Add Common Availability Change Recommendation Common Availability Post"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/change_recommendation/{change_request_id}/recommendations":{"get":{"tags":["change_recommendation"],"summary":"Get Proposals","description":"Get all recommendations for a specific change request.\n\nArgs:\n    change_request_id (int): ID of the change request\n    db (Session): Database session\n    current_user (User): Current authenticated user\n    \nRaises:\n    HTTPException: If change request is not found\n    \nReturns:\n    list[ChangeRecomendation]: List of change recommendations","operationId":"get_proposals_change_recommendation__change_request_id__recommendations_get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"change_request_id","in":"path","required":true,"schema":{"type":"integer","title":"Change Request Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ChangeRecomendationResponse"},"title":"Response Get Proposals Change Recommendation  Change Request Id  Recommendations Get"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["change_recommendation"],"summary":"Delete Recommendations","description":"Delete all recommendations for a specific change request.\n\nArgs:\n    change_request_id (int): ID of the change request\n    db (Session): Database session\n    current_user (User): Current authenticated user\n    \nRaises:\n    HTTPException: If change request is not found","operationId":"delete_recommendations_change_recommendation__change_request_id__recommendations_delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"change_request_id","in":"path","required":true,"schema":{"type":"integer","title":"Change Request Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/room-unavailability/":{"get":{"tags":["room-unavailability"],"summary":"Get Room Unavailability","description":"Retrieve a list of all room unavailability periods.\n\nArgs:\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nReturns:\n    list[RoomUnavailability]: List of all room unavailability periods.","operationId":"get_room_unavailability_room_unavailability__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/RoomUnavailabilityResponse"},"type":"array","title":"Response Get Room Unavailability Room Unavailability  Get"}}}}},"security":[{"OAuth2PasswordBearer":[]}]},"post":{"tags":["room-unavailability"],"summary":"Create Room Unavailability","description":"Create a new room unavailability period.\n\nArgs:\n    unavailability (RoomUnavailabilityCreate): Data for the new unavailability period.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If end time is not greater than start time, room is not found,\n                  or the period overlaps with existing unavailability.\n\nReturns:\n    RoomUnavailability: The newly created room unavailability period.","operationId":"create_room_unavailability_room_unavailability__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomUnavailabilityCreate"}}},"required":true},"responses":{"201":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomUnavailabilityResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}},"security":[{"OAuth2PasswordBearer":[]}]}},"/room-unavailability/{unavailability_id}":{"get":{"tags":["room-unavailability"],"summary":"Get Room Unavailability By Id","description":"Retrieve a specific room unavailability period by ID.\n\nArgs:\n    unavailability_id (int): ID of the unavailability period to retrieve.\n    db (Session): Database session.\n    current_user (User): Current authenticated user.\n\nRaises:\n    HTTPException: If the unavailability period is not found.\n\nReturns:\n    RoomUnavailability: The requested room unavailability period.","operationId":"get_room_unavailability_by_id_room_unavailability__unavailability_id__get","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"unavailability_id","in":"path","required":true,"schema":{"type":"integer","title":"Unavailability Id"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomUnavailabilityResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"put":{"tags":["room-unavailability"],"summary":"Update Room Unavailability","description":"Update an existing room unavailability period.\n\nArgs:\n    unavailability_id (int): ID of the unavailability period to update.\n    unavailability (RoomUnavailabilityUpdate): Updated unavailability data.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If the unavailability period is not found or end time is not greater than start time.\n\nReturns:\n    RoomUnavailability: The updated room unavailability period.","operationId":"update_room_unavailability_room_unavailability__unavailability_id__put","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"unavailability_id","in":"path","required":true,"schema":{"type":"integer","title":"Unavailability Id"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomUnavailabilityUpdate"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoomUnavailabilityResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}},"delete":{"tags":["room-unavailability"],"summary":"Delete Room Unavailability","description":"Delete a room unavailability period by ID.\n\nArgs:\n    unavailability_id (int): ID of the unavailability period to delete.\n    db (Session): Database session.\n    current_user (User): Current authenticated user (must be ADMIN or KOORDYNATOR).\n\nRaises:\n    HTTPException: If the unavailability period is not found.","operationId":"delete_room_unavailability_room_unavailability__unavailability_id__delete","security":[{"OAuth2PasswordBearer":[]}],"parameters":[{"name":"unavailability_id","in":"path","required":true,"schema":{"type":"integer","title":"Unavailability Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/equipment/":{"get":{"tags":["equipment"],"summary":"Get All Equipment","operationId":"get_all_equipment_equipment__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/EquipmentResponse"},"type":"array","title":"Response Get All Equipment Equipment  Get"}}}}}},"post":{"tags":["equipment"],"summary":"Add Equipment","operationId":"add_equipment_equipment__post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EquipmentCreate"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EquipmentResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/equipment/{equipment_id}":{"delete":{"tags":["equipment"],"summary":"Delete Equipment","operationId":"delete_equipment_equipment__equipment_id__delete","parameters":[{"name":"equipment_id","in":"path","required":true,"schema":{"type":"integer","title":"Equipment Id"}}],"responses":{"204":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/":{"get":{"summary":"Root","operationId":"root__get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}}},"components":{"schemas":{"AvailabilityProposalResponse":{"properties":{"id":{"type":"integer","title":"Id"},"user_id":{"type":"integer","title":"User Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"}},"type":"object","required":["id","user_id","day","time_slot_id"],"title":"AvailabilityProposalResponse"},"Body_login_for_access_token_auth_token_post":{"properties":{"grant_type":{"anyOf":[{"type":"string","pattern":"^password$"},{"type":"null"}],"title":"Grant Type"},"username":{"type":"string","title":"Username"},"password":{"type":"string","title":"Password"},"scope":{"type":"string","title":"Scope","default":""},"client_id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Id"},"client_secret":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Client Secret"}},"type":"object","required":["username","password"],"title":"Body_login_for_access_token_auth_token_post"},"ChangeRecomendationResponse":{"properties":{"id":{"type":"integer","title":"Id"},"change_request_id":{"type":"integer","title":"Change Request Id"},"recommended_day":{"type":"string","format":"date","title":"Recommended Day"},"recommended_slot_id":{"type":"integer","title":"Recommended Slot Id"},"recommended_room_id":{"type":"integer","title":"Recommended Room Id"},"source_proposal":{"anyOf":[{"$ref":"#/components/schemas/AvailabilityProposalResponse"},{"type":"null"}]}},"type":"object","required":["id","change_request_id","recommended_day","recommended_slot_id","recommended_room_id"],"title":"ChangeRecomendationResponse"},"ChangeRequestCreate":{"properties":{"course_event_id":{"type":"integer","title":"Course Event Id"},"initiator_id":{"type":"integer","title":"Initiator Id"},"status":{"$ref":"#/components/schemas/ChangeRequestStatus"},"reason":{"type":"string","title":"Reason"},"room_requirements":{"type":"string","title":"Room Requirements"},"minimum_capacity":{"type":"integer","title":"Minimum Capacity"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["course_event_id","initiator_id","status","reason","room_requirements","minimum_capacity","created_at"],"title":"ChangeRequestCreate"},"ChangeRequestResponse":{"properties":{"id":{"type":"integer","title":"Id"},"course_event_id":{"type":"integer","title":"Course Event Id"},"initiator_id":{"type":"integer","title":"Initiator Id"},"status":{"$ref":"#/components/schemas/ChangeRequestStatus"},"reason":{"type":"string","title":"Reason"},"room_requirements":{"type":"string","title":"Room Requirements"},"minimum_capacity":{"type":"integer","title":"Minimum Capacity"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["id","course_event_id","initiator_id","status","reason","room_requirements","minimum_capacity","created_at"],"title":"ChangeRequestResponse"},"ChangeRequestStatus":{"type":"string","enum":["PENDING","ACCEPTED","REJECTED","CANCELLED"],"title":"ChangeRequestStatus"},"ChangeRequestUpdate":{"properties":{"change_request_id":{"type":"integer","title":"Change Request Id"},"course_event_id":{"type":"integer","title":"Course Event Id"},"initiator_id":{"type":"integer","title":"Initiator Id"},"status":{"anyOf":[{"$ref":"#/components/schemas/ChangeRequestStatus"},{"type":"null"}]},"reason":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Reason"},"room_requirements":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Room Requirements"},"minimum_capacity":{"type":"integer","title":"Minimum Capacity"},"created_at":{"type":"string","format":"date-time","title":"Created At"}},"type":"object","required":["change_request_id","course_event_id","initiator_id","status","reason","room_requirements","minimum_capacity","created_at"],"title":"ChangeRequestUpdate"},"CourseCreate":{"properties":{"name":{"type":"string","title":"Name"},"teacher_id":{"type":"integer","title":"Teacher Id"},"group_id":{"type":"integer","title":"Group Id"}},"type":"object","required":["name","teacher_id","group_id"],"title":"CourseCreate"},"CourseEventCreate":{"properties":{"course_id":{"type":"integer","title":"Course Id"},"room_id":{"type":"integer","title":"Room Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"},"canceled":{"type":"boolean","title":"Canceled","default":false}},"type":"object","required":["course_id","room_id","day","time_slot_id"],"title":"CourseEventCreate"},"CourseEventResponse":{"properties":{"course_id":{"type":"integer","title":"Course Id"},"room_id":{"type":"integer","title":"Room Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"},"canceled":{"type":"boolean","title":"Canceled","default":false},"id":{"type":"integer","title":"Id"}},"type":"object","required":["course_id","room_id","day","time_slot_id","id"],"title":"CourseEventResponse"},"CourseEventUpdate":{"properties":{"room_id":{"type":"integer","title":"Room Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"},"canceled":{"type":"boolean","title":"Canceled","default":false}},"type":"object","required":["room_id","day","time_slot_id"],"title":"CourseEventUpdate"},"CourseResponse":{"properties":{"name":{"type":"string","title":"Name"},"teacher_id":{"type":"integer","title":"Teacher Id"},"group_id":{"type":"integer","title":"Group Id"},"id":{"type":"integer","title":"Id"}},"type":"object","required":["name","teacher_id","group_id","id"],"title":"CourseResponse"},"EquipmentCreate":{"properties":{"name":{"type":"string","title":"Name"}},"type":"object","required":["name"],"title":"EquipmentCreate"},"EquipmentResponse":{"properties":{"name":{"type":"string","title":"Name"},"id":{"type":"integer","title":"Id"}},"type":"object","required":["name","id"],"title":"EquipmentResponse"},"GroupCreate":{"properties":{"name":{"type":"string","title":"Name"},"year":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Year"},"leader_id":{"type":"integer","title":"Leader Id"}},"type":"object","required":["name","year","leader_id"],"title":"GroupCreate"},"GroupResponse":{"properties":{"id":{"type":"integer","title":"Id"},"name":{"type":"string","title":"Name"},"year":{"type":"integer","title":"Year"},"leader_id":{"type":"integer","title":"Leader Id"}},"type":"object","required":["id","name","year","leader_id"],"title":"GroupResponse"},"GroupUpdate":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"year":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Year"},"leader_id":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Leader Id"}},"type":"object","required":["name","year","leader_id"],"title":"GroupUpdate"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"ProposalCreate":{"properties":{"change_request_id":{"type":"integer","title":"Change Request Id"},"user_id":{"type":"integer","title":"User Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"}},"type":"object","required":["change_request_id","user_id","day","time_slot_id"],"title":"ProposalCreate"},"ProposalResponse":{"properties":{"id":{"type":"integer","title":"Id"},"change_request_id":{"type":"integer","title":"Change Request Id"},"accepted_by_leader":{"type":"boolean","title":"Accepted By Leader"},"accepted_by_representative":{"type":"boolean","title":"Accepted By Representative"},"user_id":{"type":"integer","title":"User Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"}},"type":"object","required":["id","change_request_id","accepted_by_leader","accepted_by_representative","user_id","day","time_slot_id"],"title":"ProposalResponse"},"ProposalUpdate":{"properties":{"user_id":{"type":"integer","title":"User Id"},"day":{"type":"string","format":"date","title":"Day"},"time_slot_id":{"type":"integer","title":"Time Slot Id"}},"type":"object","required":["user_id","day","time_slot_id"],"title":"ProposalUpdate"},"RoomCreate":{"properties":{"name":{"type":"string","title":"Name"},"capacity":{"type":"integer","title":"Capacity"},"type":{"$ref":"#/components/schemas/RoomType"},"equipment_ids":{"items":{"type":"integer"},"type":"array","title":"Equipment Ids","default":[]}},"type":"object","required":["name","capacity","type"],"title":"RoomCreate"},"RoomResponse":{"properties":{"id":{"type":"integer","title":"Id"},"name":{"type":"string","title":"Name"},"capacity":{"type":"integer","title":"Capacity"},"type":{"$ref":"#/components/schemas/RoomType"},"equipment":{"items":{"$ref":"#/components/schemas/EquipmentResponse"},"type":"array","title":"Equipment","default":[]}},"type":"object","required":["id","name","capacity","type"],"title":"RoomResponse"},"RoomType":{"type":"string","enum":["LECTURE_HALL","LABORATORY","SEMINAR_ROOM","CONFERENCE_ROOM","OTHER"],"title":"RoomType"},"RoomUnavailabilityCreate":{"properties":{"room_id":{"type":"integer","title":"Room Id"},"start_datetime":{"type":"string","format":"date","title":"Start Datetime"},"end_datetime":{"type":"string","format":"date","title":"End Datetime"}},"type":"object","required":["room_id","start_datetime","end_datetime"],"title":"RoomUnavailabilityCreate"},"RoomUnavailabilityResponse":{"properties":{"id":{"type":"integer","title":"Id"},"room_id":{"type":"integer","title":"Room Id"},"start_datetime":{"type":"string","format":"date","title":"Start Datetime"},"end_datetime":{"type":"string","format":"date","title":"End Datetime"}},"type":"object","required":["id","room_id","start_datetime","end_datetime"],"title":"RoomUnavailabilityResponse"},"RoomUnavailabilityUpdate":{"properties":{"start_datetime":{"type":"string","format":"date","title":"Start Datetime"},"end_datetime":{"type":"string","format":"date","title":"End Datetime"}},"type":"object","required":["start_datetime","end_datetime"],"title":"RoomUnavailabilityUpdate"},"RoomUpdate":{"properties":{"capacity":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Capacity"},"type":{"anyOf":[{"$ref":"#/components/schemas/RoomType"},{"type":"null"}]},"equipment_ids":{"anyOf":[{"items":{"type":"integer"},"type":"array"},{"type":"null"}],"title":"Equipment Ids"}},"type":"object","required":["capacity","type"],"title":"RoomUpdate"},"Token":{"properties":{"access_token":{"type":"string","title":"Access Token"},"token_type":{"type":"string","title":"Token Type"}},"type":"object","required":["access_token","token_type"],"title":"Token"},"UserCreate":{"properties":{"name":{"type":"string","title":"Name"},"surname":{"type":"string","title":"Surname"},"email":{"type":"string","format":"email","title":"Email"},"password":{"type":"string","title":"Password"},"role":{"$ref":"#/components/schemas/UserRole"}},"type":"object","required":["name","surname","email","password","role"],"title":"UserCreate"},"UserResponse":{"properties":{"id":{"type":"integer","title":"Id"},"name":{"type":"string","title":"Name"},"surname":{"type":"string","title":"Surname"},"email":{"type":"string","title":"Email"},"role":{"$ref":"#/components/schemas/UserRole"}},"type":"object","required":["id","name","surname","email","role"],"title":"UserResponse"},"UserRole":{"type":"string","enum":["ADMIN","KOORDYNATOR","PROWADZACY","STAROSTA"],"title":"UserRole"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}},"securitySchemes":{"OAuth2PasswordBearer":{"type":"oauth2","flows":{"password":{"scopes":{},"tokenUrl":"auth/token"}}}}}}